/*Colin Smith
* CS 161
* Final Project
******************************************************************************************************
* Project Description
*
* This is a simple quiz program designed specifically to test for knowledge gained
* in this course (CS 161). I took a lot of questions from the quizzes and tests we
* have taken in the past and made some of my own.
*
* The basic flow of the program goes like this:
*
* 1. The user is told how the program works and is asked for their name and age
* which is stored in a struct.
*
* 2. Then 7 random questions are generated by generating 7 random numbers, storing them
* in an array and passing them to a switch statement one by one.
*
* 3. Each switch statement is a question with its own if else statement tailored
* specifically to that question. If the user answers correctly, they get a point. If not,
* the program moves on to the next question and the user gets no points.
*
* 4. When the user is done answering questions, the score that the user gets is stored in the
* same struct as their name and age.
*
* 5. Then a leader-board is displayed, showing the top 10 users of the game for that
* instance of the program. It will display their name, age and score.
*
* 6. Finally, the user is asked if they want to play again and then is asked if a new user
* will be playing.
*
* 7. Then the whole  process is repeated.
******************************************************************************************************/

#include <iostream>
//#include <windows.h>
#include "time.h"
#include <limits.h>
#include <cstdlib>
#include <string.h>

using namespace std;

const int MAXSIZE = 100;

//satisfies #24 (defining a class)--------------------------------------------
class QuizProgram
{
public:
    void randQuestGen (int questArray []);
    void quizRun ();
    void answerQuestion (int question, int &finalScore);
    void highScoreDeterm (struct Contestant contPoint [], int &topScore, string &topScoreHolder);
    void sortLeaderBoard (struct Contestant aray []);

    //answerCheck satisfies #17 (function overloading)----------------------------------------
    string answerCheck (string answer);
    string answerCheck19 (string answer);
    string nameCheck (string name);
    void answerCheck (int &answer);
    void questionCounter (int questArray [], int &questionCount, int &finalScore);
    void ageCheck (int &age);
    void printResults (string name, int finalScore, struct Contestant contPoint [], int &contNum);
    void highScore (struct Contestant contPoint []);


private:
    string takeAgain;
    string newUser;
    bool newUserBool = true;
    int finalScore = 0;
    int answerQuestionEnter = 0;
    int contNum = 0;

    bool check = true;

    bool validString1 = false;
    bool validString2 = false;
    bool validString3 = false;
    bool validString4 = false;
    bool validString5 = false;
    bool validString6 = false;
    bool validString7 = false;
    string answerCopy;
    string nameCopy;

    string userAnswer;
    int userAnswerInt;
    char userAnswerChar[100];
    int ASCIIvalue = 0;

    int questionCount = 7;
    int topScore;
    string topScoreHolder;
    int topScoreCheck = 0;
};

//satisfies #23 (define and use at least one struct)----------------------------------------------------
struct Contestant
{
public:
    string name;
    int age;
    int score;
};



int main ()
{
         QuizProgram a;


         a.quizRun();
}

//satisfies #14 (functional decomposition) -----------------------------------------------------------------
//satisfies #13 (use at least one function that you define)------------------------------------------------
void QuizProgram::quizRun()
{


    QuizProgram a;
    //satisfies #21 (dynamically declared array)-------------------------------------------------------------
    Contestant *contPoint = new Contestant[10];

    int questArray [100];



    //satisfies #9 (use at least one loop)------------------------------------------------------------
     do{


            //satisfies #4 (use some form of simple output)-----------------------------------------------------
     cout << "This is a program for budding computer scientists to test their knowledge "
         << "of basic principles and ideas in computer science. You will be given 7 questions "
         << "and will be given a grade out of the total of those questions. It will be in a "
         << "multiple choice and true or false format. For true or false, please answer with a single "
         << " \"T\" or \"F\". For multiple choice, enter the corresponding number for the answer you want."<<endl;//#4
    cout << endl;

    //Used to check if the user is new and gets their name and age.
    if(newUserBool == true)
    {
    cout <<"Before we begin, I need your name and age. Please enter your first name. No more than 20 characters please."<<endl;
    cout <<endl;

    getline (cin, contPoint[contNum].name);
    cout << endl;
    contPoint[contNum].name = a.nameCheck(contPoint[contNum].name);
    cout << endl;

    cout <<"Please enter your age."<<endl;
    cout << endl;
    cin >>contPoint[contNum].age;
    cout << endl;
    a.ageCheck (contPoint[contNum].age);
    cout <<endl;
    }
    cin.clear ();
    cin.ignore (INT_MAX, '\n');

    a.randQuestGen(questArray);
    a.questionCounter(questArray, questionCount, contPoint[contNum].score);
    a.printResults(contPoint[contNum].name, contPoint[contNum].score, contPoint, contNum);

    //# satisfies 12 (used to help check for bugs)------------------------------------------------------------
     /*questArray[1]= 19;
     answerQuestionEnter = questArray [1];

     a.answerQuestion(questArray[1], finalScore);*/

    //satisfies #12 (debugging tricks)----------------------------------------------------------------
     //for testing purposes only
    /*for (int i = 0; i < 10; i++)
    {
        cout << questArray[i]<<" ";
    }*/

    //This determines the order on the leaderboard
    if (topScoreCheck > 0)
    {
        highScoreDeterm(contPoint, topScore, topScoreHolder);
    }
    else
    {
        topScore = contPoint[contNum].score;
        topScoreHolder = contPoint[contNum].name;
    }

    sortLeaderBoard(contPoint);

    cout <<"---------------"<<endl;
    cout <<"| LEADERBOARD |"<<endl;

    for (int i = 0; i < contNum+1; i++)
    {
        cout <<"-----------------------------------"<<endl;
        cout <<"NUMBER #"<<i+1<<endl;
        cout <<"-----------------------------------"<<endl;
        cout <<"Name: "<<contPoint[i].name<<endl;
        cout <<"Age: "<<contPoint[i].age<<endl;
        cout <<"Score: "<<contPoint[i].score<<endl;
        cout <<"-----------------------------------"<<endl;
        cout <<endl;
    }


    cout <<"Would you like to take the quiz again? Type any key to stop, type \"yes\" to continue."<<endl;
    cout << endl;
    getline(cin, takeAgain);
    cout <<"\n";

    if (takeAgain == "Yes" || takeAgain == "yes" || takeAgain == "YES")
    {
    cout <<"Is this a new user? Y/N"<<endl;
    cout <<endl;
    getline(cin, newUser);
    cout <<endl;
    newUser = nameCheck(newUser);
    questionCount = 7;
    finalScore = 0;
    }

    if (newUser == "Yes"|| newUser == "yes"|| newUser == "Y"||newUser == "y")
    {
        contNum = contNum+1;
        topScoreCheck = topScoreCheck+1;
        newUserBool = true;
    }
    else
    {
        newUserBool = false;
        //TopScoreCheck = TopScoreCheck+1;
        contPoint[contNum].score = 0;
    }


        //satisfies #8 (use some form of logical or bitwise operator------------------------------------------------------
     }while (takeAgain == "Yes" || takeAgain == "yes" || takeAgain == "YES");
}

//satisfies #14 (functional decomposition) -----------------------------------------------------------------
//satisfies #16 pass by reference---------------------------------------------------------------
void QuizProgram::randQuestGen(int questArray[])
{
    // The loops below ensure that no two questions will be displayed
    // to the same user. Basically, it make sure no two same random
    // numbers will be generated
    srand((unsigned)time(NULL));

    //satisfies #10 (uses at least one random number)-----------------------------------------------------------
    for (int i = 0; i < 10; i++)
    {
        do
        {
        questArray[i] = (rand() % 26)+1;

        check = true;
        for (int j = 0 ; (check) && (j < i) ; j++)
        {
            check = (questArray[i] != questArray[j]);
        }
        } while (check == false);
    }

    //if I tried to do this output it would be out of scope and I would get a compiler error. This is because i was defined only
    //within the for loop above. This satisfies #15 (demonstrate scope)---------------------------------------------------------------------------
    //cout << i;

}

//satisfies #14 (functional decomposition) -----------------------------------------------------------------
void QuizProgram::answerQuestion (int question, int &finalScore)
{

    //used to check variables declared in the class QuizProgram satisfies #12
    /*string userAnswer;
    int userAnswerInt;
    char userAnswerChar[100];
    int ASCIIvalue;*/

    //This is the part of the program that stores the questions and and their respective answers.
    //This part also determines the score the user will get by adding one to final score if the
    //user answers the question correctly.
    switch(question)
    {
    case 1:
        cout <<"A recursive function is a function whose definition contains a call to the function being "
             <<"defined or another function that eventually calls the function being defined. T/F"<<endl;
        cout <<endl;

        //satisfies #24 (use an object)--------------------------------------------------------------------------
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        //satisfies #7 (use some form of conditional)-------------------------------------------------------------
        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;


    case 2:
        cout <<"A for loop is a convenient way to step through an array. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 3:
        cout <<"You can assign a C++ standard string to a C-string variable. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "F" || userAnswer == "f")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 4:
        cout <<"A single array in C++ may have several different data types stored in it. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "F" || userAnswer == "f")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 5:
        cout <<"The two common ways of passing arguments to functions are pass by value and pass by reference. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 6:
        cout <<"The C-string library functions usually use the null terminator (\'\\0\'\) to decide when to stop processing. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 7:
        cout <<"No matter how many times you call a recursive function it only causes "
             <<"one frame to be placed on the stack. (a frame is generally created "
             <<" when you make a function call) T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "F" || userAnswer == "f")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 8:
        cout <<"An array identifier acts as a pointer to the memory address of the first element in the array. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 9:
        cout <<"Switch statements will not compile without a break at the end of each case. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "F" || userAnswer == "f")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 10:
        cout <<"If a recursive chain is too long and it attempts to grow beyond it's limit, this is called stack flow. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "F" || userAnswer == "f")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

     case 11:
        cout <<"A base case is not necessary for a recursive function. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "F" || userAnswer == "f")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

     case 12:
        cout <<"The number in square brackets in an array declaring the size of the array is called an index. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

     case 13:
        //satisfies #2 (demonstrate understanding of two's complement)---------------------------------------------
        cout <<"The number 25 in two's complement is 00011001. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 14:
        cout <<"The number 120 in two's complement is 01111000. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 15:
        // satisfies #1(demonstrate understanding of binary)-------------------------------------------------
        cout <<"The number 113 in binary is 1110000. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "F" || userAnswer == "f")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 16:
        cout <<"The number 113 in binary is 1110001. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 17:
        cout <<"A multidimensional arrays can be thought of as an array within an array. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    case 18:
        cout <<"The number 113 in binary is 1110000. T/F"<<endl;
        cout <<endl;
        getline(cin, userAnswer);
        userAnswer = answerCheck(userAnswer);
        cout <<endl;

        if (userAnswer == "T" || userAnswer == "t")
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        break;

    //This part satisfies #6 (use some form of typecasting)--------------------------------------------------------------------------
    case 19:
        cout <<"Enter any single letter."<<endl;
        cout <<endl;
        //# satisfies 12 (used to help check for bugs)------------------------------------------------------------
        cin >> userAnswer;
        userAnswer = answerCheck19(userAnswer);
        cout <<endl;
        //# satisfies 12 (used to help check for bugs)------------------------------------------------------------
        strcpy(userAnswerChar,userAnswer.c_str());
        //cout <<userAnswerChar<<endl;
        userAnswerInt = userAnswerChar[0];
        //# satisfies 12 (used to help check for bugs)------------------------------------------------------------
        //cout <<userAnswerInt<<endl;
        userAnswerInt;
        //# satisfies 12 (used to help check for bugs)------------------------------------------------------------
        //cout << ASCIIvalue<<endl;
        cout <<"What number represents this letter in ASCII?"<<endl;
        cin >>ASCIIvalue;
        cout <<endl;


        if (userAnswerInt == ASCIIvalue)
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        cin.clear();
        cin.ignore(INT_MAX, '\n');
        break;

    case 20:
        cout << "Consider the array declaration, int x[10];.  How many elements have been allocated for this array? "<<endl;
        cout << endl;
        cout << "1.) 10, the number entered in the declaration "<<endl;
        cout << endl;
        cout << "2.) 9, one less than the number used to declare the array "<<endl;
        cout << endl;
        cout << "3.) 10, the number entered in the declaration "<<endl;
        cout << endl;
        cout << "4.) 10, the number entered in the declaration "<<endl;
        cout << endl;
        cin >> userAnswerInt;
        cout << endl;
        answerCheck(userAnswerInt);

        if (userAnswerInt == 1)
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        cin.clear();
        cin.ignore(INT_MAX, '\n');
        break;

    case 21:
        cout << "Which of the following is a valid array declaration and initialization? "<<endl;
        cout << endl;
        cout << "1.) double nums = {3.5, 35.1, 32.0}; "<<endl;
        cout << endl;
        cout << "2.) None of these answers. "<<endl;
        cout << endl;
        cout << "3.) int words[] = new words[10]; "<<endl;
        cout << endl;
        cout << "4.) char charArray[26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}; "<<endl;
        cout << endl;
        cin >> userAnswerInt;
        cout << endl;
        answerCheck(userAnswerInt);

        if (userAnswerInt == 4)
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        cin.clear();
        cin.ignore(INT_MAX, '\n');
        break;

    case 22:
        cout <<"Consider the following code: "<<endl;
        cout << endl;
        cout << "int myArray[5];"<<endl;
        cout << " myArray[0] = 5;"<<endl;
        cout << " print(myArray); "<<endl;
        cout << endl;
        cout << "1.) You get the address of where the 1st element is located in memory because that is what the variable actually stores. "<<endl;
        cout << endl;
        cout << "2.) You get nothing, because an array only holds other objects or primitives and does not have any values itself. "<<endl;
        cout << endl;
        cout << "3.) You get an error, because arrays are like pointers and objects so they cannot be printed from their variable name. "<<endl;
        cout << endl;
        cout << "4.) You get the value of the first element in the array because the printing value associated with the array is the value associated with the first element in the array."<<endl;
        cout << endl;
        cin >> userAnswerInt;
        cout << endl;
        answerCheck(userAnswerInt);

        if (userAnswerInt == 1)
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        cin.clear();
        cin.ignore(INT_MAX, '\n');
        break;

    case 23:
        cout << "A struct is useful for..."<<endl;
        cout << endl;
        cout << "1.) Storing multiple values of the same type. "<<endl;
        cout << endl;
        cout << "2.) Storing a collection of values as a single item."<<endl;
        cout << endl;
        cout << "3.) Storing a single item into a collection of values."<<endl;
        cout << endl;
        cout << "4.) Storing a single value."<<endl;
        cout << endl;
        cin >> userAnswerInt;
        cout << endl;
        answerCheck(userAnswerInt);

        if (userAnswerInt == 2)
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        cin.clear();
        cin.ignore(INT_MAX, '\n');
        break;

    case 24:
        cout << "A c-string...."<<endl;
        cout << endl;
        cout << "1.) Is a recent addition to C++. "<<endl;
        cout << endl;
        cout << "2.) is useful for storing multiple date types."<<endl;
        cout << endl;
        cout << "3.) is a precursor to the type string."<<endl;
        cout << endl;
        cout << "4.) None of the above."<<endl;
        cout << endl;
        cin >> userAnswerInt;
        cout << endl;
        answerCheck(userAnswerInt);

        if (userAnswerInt == 3)
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        cin.clear();
        cin.ignore(INT_MAX, '\n');
        break;

    case 25:
        cout << "The decimal value 92 would be what in binary?"<<endl;
        cout << endl;
        cout << "1.) 1011100"<<endl;
        cout << endl;
        cout << "2.) 1100000"<<endl;
        cout << endl;
        cout << "3.) 1011010"<<endl;
        cout << endl;
        cout << "4.) None of the above."<<endl;
        cout << endl;
        cin >> userAnswerInt;
        cout << endl;
        answerCheck(userAnswerInt);

        if (userAnswerInt == 1)
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }
        cin.clear();
        cin.ignore(INT_MAX, '\n');
        break;

    case 26:
        cout << "The decimal value 92 would be what in two's complement?"<<endl;
        cout << endl;
        cout << "1.) 01011000"<<endl;
        cout << endl;
        cout << "2.) 01011111"<<endl;
        cout << endl;
        cout << "3.) 01011100"<<endl;
        cout << endl;
        cout << "4.) None of the above."<<endl;
        cout << endl;
        cin >> userAnswerInt;
        cout << endl;
        answerCheck(userAnswerInt);

        if (userAnswerInt == 3)
        {
            cout <<"That is correct."<<endl;
            cout <<endl;
            finalScore = finalScore+1;
        }
        else
        {
            cout <<"I am sorry, that is incorrect."<<endl;
            cout <<endl;
        }

        cin.clear();
        cin.ignore(INT_MAX, '\n');
        break;

    }

}

//satisfies #14 (functional decomposition) -----------------------------------------------------------------
//satisfies #16 (pass by value)-----------------------------------------------------------------------------

//Used to make sure an answer is entered correctly for the true and false questions
string QuizProgram::answerCheck (string answer)
{
    validString1 = false;
    validString2 = false;
    validString5 = false;
    answerCopy = answer;

    while (validString1 == false && validString2 == false && validString5 == false)
    {
        if (answer.empty())
        {
            validString1 = false;
        }
        else
        {
            validString1 = true;
        }



        for (int i = 0; i < answer.length(); i++)
        {
            if (!isalpha(answer.at(i)) || (answer.at(i) == ' ' || answer.length()> 1))
            {
                validString2 = false;
                break;
            }
            else
            {
                validString2 = true;
            }
        }

        for (int i = 0; i < answer.length(); i++)
        {
            if (answer.at(i)== 'T' || answer.at(i)== 't' || answer.at(i)== 'F' || answer.at(i)== 'f')
            {
                validString5 = true;
                break;
            }
            else
            {
                validString5 = false;
            }
        }



        if (!validString1 || !validString2 || !validString5)
        {
            cout <<"Invalid entry. Enter only a single \"T\" or \"F\"."<<endl;
            cout << endl;
            getline(cin, answer);
            cout << endl;
            answerCopy = answer;

            validString1 = false;
            validString2 = false;
            validString5 = false;
        }
    }

    return answer;

}

//this is specifically tailored for question 19 being
//that the input is different than any other questions
string QuizProgram::answerCheck19 (string answer)
{
    validString6 = false;
    validString7 = false;

    answerCopy = answer;

    while (validString6 == false && validString7 == false)
    {
        if (answer.empty())
        {
            validString6 = false;
        }
        else
        {
            validString6 = true;
        }



        for (int i = 0; i < answer.length(); i++)
        {
            if (!isalpha(answer.at(i)) || (answer.at(i) == ' ' || answer.length()> 1))
            {
                validString7 = false;
                break;
            }
            else
            {
                validString7 = true;
            }
        }




        if (!validString6 || !validString7)
        {
            cout <<"Invalid entry. Enter only a single \"T\" or \"F\"."<<endl;
            cout << endl;
            getline(cin, answer);
            cout << endl;
            answerCopy = answer;

            validString6 = false;
            validString7 = false;

        }
    }

    return answer;

}

//Verifies a valid name was entered
string QuizProgram::nameCheck (string name)
{

    nameCopy = name;

    while (validString3 == false && validString4 == false)
    {
        if (name.empty())
        {
            validString3 = false;
        }
        else
        {
            validString3 = true;
        }



        for (int i = 0; i < name.length(); i++)
        {
            if (!isalpha(name.at(i)) || (name.at(i) == ' ' || name.length()> 20))
            {
                validString4 = false;
                break;
            }
            else
            {
                validString4 = true;
            }
        }

        if (!validString3 || !validString4)
        {
            cout <<"Invalid entry. Please enter only letters. No special characters or numbers."<<endl;
            cout << endl;
            getline(cin, name);
            cout << endl;
            nameCopy = name;

            validString3 = false;
            validString4 = false;
        }
    }

    return name;

}

//satisfies #14 (functional decomposition) -----------------------------------------------------------------
//satisfies #12 (debugging tricks)----------------------------------------------------------------------

//this verifies that a valid answer was entered for the multiple choice questions.
void QuizProgram::answerCheck (int &answer)
{

    while(answer > 4 || answer < 1)
    {
        cin.clear();
        //satisfies #3 (use a pre-defined macro from an existing include or library)----------------------
        cin.ignore(INT_MAX, '\n');
        cout << "Please enter a number between 1 and 4." << endl;
        cout <<endl;
        cin >> answer;
        cout <<endl;
    }

    while(!cin)
    {
        cin.clear();
        //satisfies #3 (use a pre-defined macro from an existing include or library)----------------------
        cin.ignore(INT_MAX, '\n');
        cout << "Please enter a NUMBER indicating the answer you think is correct." << endl;
        cout <<endl;
        cin >> answer;
        cout <<endl;
    }
}

//verifies that a valid age was entered
void QuizProgram::ageCheck (int &age)
{

    while(age >= 123)
    {
        cin.clear();
        //satisfies #3 (use a pre-defined macro from an existing include or library)----------------------
        cin.ignore(INT_MAX, '\n');
        cout << "Please enter a number below 123." << endl;
        cout <<endl;
        cin >> age;
        cout <<endl;
    }

    while(!cin)
    {
        cin.clear();
        //satisfies #3 (use a pre-defined macro from an existing include or library)----------------------
        cin.ignore(INT_MAX, '\n');
        cout << "Please enter a NUMBER." << endl;
        cout <<endl;
        cin >> age;
        cout <<endl;
    }
}

//satisfies #19 (use some form of recursion)

//this recursive function is used to run through all 7 questions for an individual user
void QuizProgram::questionCounter (int questArray [], int &questionCount, int &finalScore)
{
    if (questionCount == 0)
    {
        ;
    }
    else
    {
        answerQuestion(questArray[questionCount-1], finalScore);
        questionCount = questionCount-1;

        if (questionCount > 1)
        {
            cout <<"*|There are "<<questionCount<<" questions left|*"<<endl;
            cout <<endl;
        }
        if (questionCount == 1)
        {
            cout <<"*|There is "<<questionCount<<" question left|*"<<endl;
            cout <<endl;
        }
        cout <<"[Press enter to continue]"<<endl;
        cout <<endl;
        cin.clear();
        cin.ignore(INT_MAX, '\n');
        questionCounter(questArray, questionCount, finalScore);
    }
}

void QuizProgram::printResults (string name, int finalScore, struct Contestant contPoint [],int &contNum)
{
    contPoint[contNum].score = finalScore;
    cout <<name<<", you have earned "<<finalScore<<"/7 points."<<endl;
    cout <<endl;
}

//this function determines the new top score holder
void QuizProgram::highScoreDeterm (struct Contestant contPoint [], int &topScore, string &topScoreHolder)
{
    int j = contNum-1;

    //Satisfies #12 (debugging tricks)-----------------------------------------------------------------------------------
    //cout <<"contNum is "<<contNum<<endl;
    //cout <<"j is "<<j<<endl;
   // cout <<"contPoint[contNum].score is "<<contPoint[contNum].score<<endl;
   // cout <<"contPoint [j].score is "<<contPoint [j].score<<endl;

    if (contPoint[contNum].score > contPoint [j].score)
    {
        topScoreHolder =  contPoint[contNum].name;
        topScore = contPoint[contNum].score;

        cout <<"The new high score holder is "<<topScoreHolder<<" with "<<topScore<<" out of 7. Congratulations!"<<endl;
        cout << endl;
    }
    else if (contPoint[contNum].score == contPoint[j].score)
    {
        topScoreHolder =  contPoint[contNum].name;
        topScore = contPoint[contNum].score;

        cout<<topScoreHolder<<" has tied "<<contPoint[j].name<<". "
            <<topScoreHolder<<" holds the new top score with "<<topScore<<" out of 7."<<endl;
            cout<<endl;
    }
    else
    {
        cout <<topScoreHolder<<" remains the high score holder with "<<topScore<<" out of 7."<<endl;
        cout <<endl;
    }
}

//This sorts the leader-board by score.
void QuizProgram::sortLeaderBoard (struct Contestant aray [])
{


//	cin.ignore();

/////////////////Bubble Sort/////////////////////
	for (int i = 0 ;  i < contNum ; i++)
	{
		for (int  x = 0 ; x< contNum; x++)
		{
			if(aray[x].score<aray[x+1].score)
			{

				Contestant temp[contNum];
				temp[i] = aray[x+1];

				aray[x+1]=aray[x];

				aray[x]=temp [i];

			}
			else if (aray[x].score == aray[x+1].score)
            {
                Contestant temp[contNum];
                temp[i] = aray[x];
                aray[x] = aray[x+1];
                aray[x+1] = temp[i];
            }
		}
	}
/////////////////END:Bubble Sort///////////////

}
